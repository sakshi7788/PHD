{"cells":[{"cell_type":"code","execution_count":20,"metadata":{"id":"_9dKKYYq-pGV","executionInfo":{"status":"ok","timestamp":1660062273048,"user_tz":-330,"elapsed":562,"user":{"displayName":"Saksham Gupta","userId":"04359824419671425374"}}},"outputs":[],"source":["import numpy as np\n","import numpy.random as rand\n","from sklearn.metrics import silhouette_score\n","import copy\n","import pandas as pd\n","from numpy.random import randint\n","from numpy.random import rand\n","from numpy import savetxt\n","from sklearn.metrics.cluster import homogeneity_score\n","from sklearn.metrics.cluster import rand_score\n","from sklearn.metrics.cluster import normalized_mutual_info_score\n","from sklearn.metrics.cluster import completeness_score\n","from csv import writer"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"_F1ZegOi-pGc","executionInfo":{"status":"ok","timestamp":1660062273048,"user_tz":-330,"elapsed":11,"user":{"displayName":"Saksham Gupta","userId":"04359824419671425374"}}},"outputs":[],"source":["filename=\"dolphin_output_SPMF.npy\"\n","p1=[[60,10],[60,20],[61,20],[61,30],[61,50],[62,30],[63,40],[62,50],[63,60],[62,70]]"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"yqz5UaWx-pGg","executionInfo":{"status":"ok","timestamp":1660062273049,"user_tz":-330,"elapsed":11,"user":{"displayName":"Saksham Gupta","userId":"04359824419671425374"}}},"outputs":[],"source":["from sklearn.cluster import KMeans\n","def K_means_clustering(datapoint,s):\n","    a=s\n","    v=np.array(a)\n","    print(\" v shape\", v.shape)\n","    x=v.reshape(2,32)\n","    print(\" x shape\", x.shape)\n","    km=KMeans(n_clusters=2,init=x, n_init=1)\n","    km.fit(datapoint)\n","    score = silhouette_score(datapoint, km.labels_, metric='euclidean')\n","    print(\"silhouette score is\",score)\n","    def ClusterIndicesNumpy(clustNum, labels_array):\n","        return np.where(labels_array == clustNum)[0]\n","    cluster_1_records=datapoint[ClusterIndicesNumpy(0,km.labels_)]\n","    cluster_2_records=datapoint[ClusterIndicesNumpy(1,km.labels_)]\n","    #cluster_3_records=datapoint[ClusterIndicesNumpy(2,km.labels_)]\n","    #cluster_4_records=datapoint[ClusterIndicesNumpy(3,km.labels_)]\n","    #cluster_5_records=datapoint[ClusterIndicesNumpy(4,km.labels_)]\n","    \n","    return [cluster_1_records,cluster_2_records]"]},{"cell_type":"code","source":[""],"metadata":{"id":"cn3uiNAy0SEQ","executionInfo":{"status":"ok","timestamp":1660062273049,"user_tz":-330,"elapsed":11,"user":{"displayName":"Saksham Gupta","userId":"04359824419671425374"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","execution_count":22,"metadata":{"id":"IhuHiuFD-pGh","executionInfo":{"status":"ok","timestamp":1660062273049,"user_tz":-330,"elapsed":10,"user":{"displayName":"Saksham Gupta","userId":"04359824419671425374"}}},"outputs":[],"source":[""]},{"cell_type":"code","execution_count":23,"metadata":{"id":"3Fc63vN5-pGi","executionInfo":{"status":"ok","timestamp":1660062273051,"user_tz":-330,"elapsed":11,"user":{"displayName":"Saksham Gupta","userId":"04359824419671425374"}}},"outputs":[],"source":["def fitnes_function(position):\n","    #Pass only position , pass data-set and then generate \n","    #fitness_value=0.0\n","    x,y=K_means_clustering(df,position)\n","    fitness_value_x=intra_cluster(x)\n","    #print(\"x\",fitness_value_x)\n","    fitness_value_y=intra_cluster(y)\n","    #fitness_value_z=intra_cluster(z)\n","    #print(\"y\",fitness_value_y)\n","    #print(\"z\",fitness_value_z)\n","    #fitness_value_z=intra_cluster(z)\n","    #fitness_value_w=intra_cluster(w)\n","    #itness_value_l=intra_cluster(l)\n","    fitness_value=float(np.asarray(fitness_value_x))+float(np.asarray(fitness_value_y))\n","    print(\"final\",fitness_value)\n","    return fitness_value"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"avzVTOBE-pGk","executionInfo":{"status":"ok","timestamp":1660062273051,"user_tz":-330,"elapsed":10,"user":{"displayName":"Saksham Gupta","userId":"04359824419671425374"}}},"outputs":[],"source":["#pos:mean of the cluster\n","def intra_cluster(data_point):\n","    import numpy as np\n","    c=data_point\n","    #print(\"shape of data vector is\",c.shape)\n","    e=c.transpose()\n","    #print(e.shape)\n","    m,n=e.shape\n","    #print(m)\n","    #print(n)\n","    #mean_c=e.mean()\n","    #print(\"mean of the cluster is\",mean_c)\n","    #print(\"shape of the mean of the cluster is\",mean_c.shape)\n","    s1=0\n","    #mean_cluster=0\n","    total_sum_data_vector=0\n","    for x in range(0,n):\n","        p=c[:][x]\n","        #print(p.shape)\n","        data_vector=p.reshape(m,1)\n","        #print(\"shape of data point of cluster\",data_vector.shape)\n","        total_sum_data_vector+=data_vector\n","        #print(\"total sum of individual data vectors\",total_sum_data_vector)\n","        #print(\"shape of total sum of individual data vectors\",total_sum_data_vector.shape)\n","        mean_cluster=total_sum_data_vector/n\n","        #print(\"mean of each cluster\",mean_cluster)\n","    for x in range(0,n):\n","        p=c[:][x]\n","        #print(p.shape)\n","        data_vector=p.reshape(m,1)\n","        #print(\"shape of data point of cluster\",data_vector.shape)\n","        diff=(data_vector-mean_cluster)\n","        #print(\"difference of data point with cluster difference\",diff.shape)\n","        s1+=np.dot(diff,diff.transpose())\n","        #print(s1)\n","    #print(\"shape of within cluster distance matrix\",s1.shape)\n","    #print(\"final within cluster distance matrix\",s1.shape)\n","    #print(\"sum of intra cluster distance that is Sw is\",s1.trace())\n","    within=s1.trace()\n","    intra=within.reshape(1,1)\n","    ## To change\n","    inter=inter_cluster(data_point)\n","    res=within/inter\n","    #print(\"ratio of trace is\",res)\n","    #print(\"intra\",float(np.asarray(res)))\n","    return [float(np.asarray(res))]\n","   \n","  "]},{"cell_type":"code","execution_count":25,"metadata":{"id":"pLZ0IE93-pGm","executionInfo":{"status":"ok","timestamp":1660062273051,"user_tz":-330,"elapsed":10,"user":{"displayName":"Saksham Gupta","userId":"04359824419671425374"}}},"outputs":[],"source":["def inter_cluster(data_point):\n","    total_sum_data_vector=0\n","    c=data_point\n","    s1=0\n","    #print(\"shape of data vector of individual cluster is\",c.shape)\n","    m,n=c.shape\n","    #print(m)\n","    #print(n)\n","    f=c.transpose()\n","    #print(f.shape)\n","    for x in range(0,n):\n","        p=f[:][x]\n","        #print(p.shape)\n","        data_vector=p.reshape(m,1)\n","        #print(\"shape of data point of cluster\",data_vector.shape)\n","        total_sum_data_vector+=data_vector\n","        #print(\"total sum of individual data vectors\",total_sum_data_vector)\n","        #print(\"shape of total sum of individual data vectors\",total_sum_data_vector.shape)\n","        mean_cluster=total_sum_data_vector/n\n","        #print(\"mean of each cluster\",mean_cluster)\n","        #print(\"mean of each cluster shape\",mean_cluster.shape)\n","        mean_overall_cluster=data_point/m*n\n","        \n","        diff=(mean_cluster-mean_overall_cluster)\n","        #print(\"difference of individual cluster with overall difference\",diff.shape)\n","        s1+=np.dot(diff,diff.transpose())\n","        #print(s1)\n","        #print(\"shape of within cluster distance matrix\",s1.shape)\n","        #print(\"final inter cluster distance matrix\",s1.shape)\n","    #print(\"sum of inter cluster distance that is Sb is\",s1.trace())\n","        #print(s1.trace().shape)\n","    inter=s1.trace()\n","    inter.reshape(1,1)\n","    #return[inter]\n","    #print(\"inter\",float(np.asarray(inter)))\n","    return[float(np.asarray(inter))]"]},{"cell_type":"code","source":["# tournament selection- parents are selected\n","def selection(pop, scores, k=3):\n","\t# first random selection\n","\tselection_ix = randint(len(pop))\n","\tfor ix in randint(0, len(pop), k-1):\n","\t\t# check if better (e.g. perform a tournament)\n","\t\tif scores[ix] < scores[selection_ix]:\n","\t\t\tselection_ix = ix\n","\t\t\tprint(scores[ix])\n","\treturn pop[selection_ix]"],"metadata":{"id":"m-sKrhryt2iS","executionInfo":{"status":"ok","timestamp":1660062273052,"user_tz":-330,"elapsed":10,"user":{"displayName":"Saksham Gupta","userId":"04359824419671425374"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# mutation operator-change\n","def mutation(bitstring, r_mut):\n","\tfor i in range(len(bitstring)):\n","\t\t# check for a mutation\n","\t\tif rand() < r_mut:\n","\t\t\t# flip the bit\n","\t\t\tbitstring[i] = 1 - bitstring[i]\n","\t\t\t#print(\"bitstring\",bitstring[i])"],"metadata":{"id":"kSNltfyWlRZ3","executionInfo":{"status":"ok","timestamp":1660062273052,"user_tz":-330,"elapsed":10,"user":{"displayName":"Saksham Gupta","userId":"04359824419671425374"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["# crossover two parents to create two children\n","def crossover(p1, p2, r_cross):\n","\t\n","\tc1, c2 = p1.copy(), p2.copy()\n","\t\n","\tif rand() < r_cross:\n","\t\tpt = randint(0, len(p1)-1)\n","\t\tprint(pt)\n","\t\t\n","\t\tprint(\"rand\",rand())\n","\t  \n","\t\tprint(\"length of p2\",len(p2)) \n","\t  #c1 = p1[pt:] + p2[:pt]\n","\t\t#c2 = p2[pt:] + p1[:pt]\n","\n","\t\tc1 = p1[pt:] + p2[pt:]\n","\t\tc2 = p2[pt:] + p1[pt:]\n","\t\t\n","\t\tprint(\"c1\",len(c1))\n","\t\tprint(\"c2\",len(c2))\n","\treturn [c1, c2]\n","\t\n"," "],"metadata":{"id":"j7olPeemyw1L","executionInfo":{"status":"ok","timestamp":1660062273052,"user_tz":-330,"elapsed":10,"user":{"displayName":"Saksham Gupta","userId":"04359824419671425374"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["for i in range(0,10):\n","  df= np.loadtxt(r\"%s\"%(filename))\n","  df=np.nan_to_num(df, nan=0)\n","  df=np.nan_to_num(df, nan=0)\n","  parameter1=p1[i][0];\n","  parameter2=p1[i][1];\n","  Arr=np.zeros(df.shape[0])\n","  Dolphin1=[50,35,13,39,59,4,15,21,9,31,60,48,37,1,46,16,24,16,29,19,41,56,12,52,5,38,22,30,54,44,36,17,45,53,34,15,43,11,46,15];\n","  Dolphin2=[49,58,6,10,14,55,57,20,2,7,18,23,61,32,42,28,8,27,26];\n","  Karate1=[13,20,5,6,1,4,3,17,7,11,12,22,18,8,2,14];\n","  Karate2=[29,32,25,28,26,24,27,30,10,34,9,33,19,31,21,16,23,15];\n","  for i in range(df.shape[0]):\n","     if(i in Karate1):\n","       Arr[i]=1;\n","     elif(i in Karate2):\n","       Arr[i]=2;\n","  df2=pd.DataFrame(Arr);\n","  n_pop=2;\n","  n_iter=5;\n","  r_cross = 0.9\n","  r_mut=0.33\n","  pop = [df[np.random.randint(1,16,size=2)] for _ in range(n_pop)]\n","  print(\"length\",len(pop[0]))\n","  best, best_eval = 0, fitnes_function(pop[0])\n","  for gen in range(n_iter):\n","\t    scores = [fitnes_function(c) for c in pop]\n","\t\t  for i in range(n_pop):\n","\t\t\t    if scores[i] < best_eval:\n","\t\t\t\t      best, best_eval = pop[i], scores[i]\n","\t\t\t\t      print(\">%d, new best f(%s) = %.3f\" % (gen,  pop[i], scores[i]))\n","\t\t  # select parents\n","\t\t  selected = [selection(pop, scores) for _ in range(n_pop)]\n","\t\t  print(\"selected\",len(selected))\n","  children = list()\n","  for i in range(0, n_pop, 2):\n","\t  \t\t# get selected parents in pairs\n","\t\t  \tp1, p2 = selected[i], selected[i+1]\n","\t\t\t  print(\"p2\",len(p2))\n","        #print(\"p2\",len(p2))\n","\t\t\t  # crossover and mutation\n","\t\t\t  for c in crossover(p1, p2, r_cross):\n","\t\t\t\t  # mutation\n","\t\t\t\t  #print(\"children\",len(children[c]))\n","\t\t\t\t  mutation(c, r_mut)\n","\t\t\t\t   # store for next generation\n","\t\t\t\t  children.append(c)\n","\t\t  # replace population\n","  pop = children\t\n","  print(\"iteration\",i)\n","  print(best,best_eval)\n","  a=children[0]\n","  v=np.array(a)\n","  x=v.reshape(2,32)\n","\n","  km=KMeans(n_clusters=2,init=x, n_init=1)\n","  d=km.fit_predict(df)\n","  df1 = pd.DataFrame(d);\n","  df = pd.DataFrame(df);\n","  df[\"Predicted\"]=df1.values\n","  df[\"Actual\"]=df2.values\n","  \n","\n","  List=[parameter1,parameter2,\"%s\"%(filename),\"after\",completeness_score(d,Arr),homogeneity_score(d, Arr),rand_score(d, Arr),normalized_mutual_info_score(d, Arr)]\n","  with open('GGWWOO.csv', 'a') as f_object:\n","\n","    writer_object = writer(f_object)\n","    writer_object.writerow(List)\n","    f_object.close()"],"metadata":{"id":"CloEsXQgWTYj","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"error","timestamp":1660062415444,"user_tz":-330,"elapsed":8,"user":{"displayName":"Saksham Gupta","userId":"04359824419671425374"}},"outputId":"b558595b-5404-4554-ab45-fdd8e209f559"},"execution_count":30,"outputs":[{"output_type":"error","ename":"TabError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-30-95332063308c>\"\u001b[0;36m, line \u001b[0;32m27\u001b[0m\n\u001b[0;31m    for i in range(n_pop):\u001b[0m\n\u001b[0m                          ^\u001b[0m\n\u001b[0;31mTabError\u001b[0m\u001b[0;31m:\u001b[0m inconsistent use of tabs and spaces in indentation\n"]}]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"colab":{"name":"GA_2._doipynb","provenance":[{"file_id":"1RQvwYS5zPn93qi5U5KmRd5aMM3Bh1eJ-","timestamp":1660061493905},{"file_id":"1JHqYUlAjjDVvS5smKxSvIspytsXrUoVg","timestamp":1660023903018},{"file_id":"1t8i84Chd-Whn61ot-5KpvCXcEYnMgElK","timestamp":1659460557556}],"collapsed_sections":[]}},"nbformat":4,"nbformat_minor":0}